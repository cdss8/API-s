Adresses and Password

0x496307904bBB2A18537E0b06Bf5C40C44E77f168   -   blame can staff excuse orange swarm royal average gather audit silver obscure
0x84CF672f71483A9a92f7c0c195e6432779D6f44E   -   kit frown grid real million apart master stamp reward subject vintage visual
0x16a24DC7bc0336C318f891AD1Ccc78F70C79EC63   -   neglect eyebrow guitar nest model degree boy goose valley harvest replace coral
0x16a24DC7bc0336C318f891AD1Ccc78F70C79EC63   -   garbage that party rich close above brass kidney danger record close minute
0x0eC58d9d70fbC4a83c79049345E50114d66279FA   -   trust genuine jaguar arrive mad august can similar mushroom tuna theme cradle
0x4f41F5d1587f9c7C84fB6485EAB56611B7a2A09D   -   kidney palace puppy return twelve spoil worth license clock arch acoustic monster
0xCc7F5cCF130800e64B7587d810d8A6830BD59949   -   sausage vapor carry essay floor stamp velvet address come always bread remember
0x067860eb5012EB9D5332266038fB9586bAc4A24A   -   sphere save profit taxi order later rhythm dream rabbit chunk immense today
0xa39acc7CD845754639dC3575006149dcb442643D   -   excess snow daring sell detail breeze same coin deposit fiscal burden piece
0x9cD49bE81aA5059A8fC1c9367337F8DF06B35C35   -   nest indoor sand balcony gadget mirror debris fiction advance width nation life








//UPDATE
server.addService(userProto.UserService.service, {
  UpdateUser: async ({request}, callback)=> {
    try{ callback(null, {
      id: request.id,
      nickname: request.nickname,
      Walladress: request.Walladress,
      descriprion: request.descriprion,})

      data.status = "Ok";
      data.save()
    
    } catch (err) {callback(err);}
}})


//DELETE
server.removeService(userProto.UseService.service, {
  DeleteUser: async ({ request }, callback) => {
    try {
        callback(null, await db.destroy({ where: { id: request.id } }), {
            message: "Ok Sucessfully deleted"});
    } catch (err) {callback(err);}
}})


//GET ALL USERS
server.addService(userProto.UserService.service, {
  GetAllUsers: async ({ request }, callback) => {

    try {callback(null, data = await db.findAll(), {
        result: data });
    } catch (err) {callback(err);}
}
})

message UserResponse{
    int32 id = 1;
    string nickname = 2;
    string Walladress = 3;
    string description =4;
}

message UserList{
    repeated UserResponse = 1;
}

message UserID {
    int32 id = 1;
}

message EditUser{
    int32 id = 1;
    string nickname = 2;
    string Walladress = 3;
    string description =4;
}

message Success{
    string message=1;
}

message CreateUser {
    int32 id = 1;
    string nickname = 2;
    string adress = 3;
    string wallet = 4;
}

